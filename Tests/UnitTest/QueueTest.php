<?php

namespace Tests\UnitTest;

use Entity\Queue;

include_once __DIR__."/../../Entity/Queue.php";

class QueueTest extends \PHPUnit_Framework_TestCase
{

    public function testAdd()
    {
        $queue = new Queue();

        $mock = $this->getMockBuilder("Person")
            ->setMethods(["setFirstname", "getFirstname", "setLastname", "getLastname", "setAge", "getAge"])
            ->getMock();

        $mock->method("setFirstname")->will($this->returnValue("Manuel"));
        $mock->method("getFirstname")->will($this->returnValue($mock->setFirstname()));

        $mock->method("setLastname")->will($this->returnValue("Stieger"));
        $mock->method("getLastname")->will($this->returnValue($mock->setLastname()));

        $mock->method("setAge")->will($this->returnValue(26));
        $mock->method("getAge")->will($this->returnValue($mock->setAge()));

        $this->assertEquals("Manuel", $mock->getFirstname());
        $this->assertEquals("Stieger", $mock->getLastname());
        $this->assertEquals(26, $mock->getAge());

        $queue->add($mock);

        $this->assertEquals(1, $queue->getLength());
    }

    public function testRemove()
    {
        $queue = new Queue();

        $person = array(
            "firstname" => "Manuel",
            "lastname" => "Stieger",
            "age" => 26
        );

        $queue->add($person);

        $this->assertEquals(1, $queue->getLength());

        $queue->remove($person);

        $this->assertEquals(0, $queue->getLength());
    }

    public function testWriteFile()
    {
        $queue = new Queue();

        $person = array(
            "firstname" => "Manuel",
            "lastname" => "Stieger",
            "age" => 26
        );

        $queue->add($person);

        $queue->writeFile();
    }

    public function testReadFile()
    {
        $queue = new Queue();

        $queue->readFile();
    }

    protected function tearDown()
    {
        parent::tearDown(); // TODO: Change the autogenerated stub
    }

}
